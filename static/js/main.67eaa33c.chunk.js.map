{"version":3,"sources":["util/constants.ts","components/Card.tsx","util/hooks.ts","components/DummyCard.tsx","components/Deck.tsx","components/Bar.tsx","components/Stats.tsx","components/Game.tsx","game/GameWorld.ts","data/default/cards.ts","data/default/events.ts","data/default/event-cards.ts","App.tsx","index.tsx"],"names":["SwipeDirection","trans","r","s","getThreshold","Math","min","window","innerWidth","Card","keys","callback","i","cardData","onSwipe","layer","title","distance","text","image","useSpring","x","y","scale","rot","delay","to","from","cardAnimationState","setCardAnimationState","useState","isGone","currentKey","cardState","gestureControl","args","down","xDelta","delta","velocity","direction","trigger","abs","devicePixelRatio","dir","sign","setTimeout","undefined","config","friction","tension","key","directionX","Left","Right","useEffect","downHandler","event","includes","upHandler","addEventListener","removeEventListener","bind","useGesture","div","className","style","position","transform","interpolate","zIndex","backgroundImage","DummyCard","transition","loopingIndex","index","length","tick","Deck","card","cardStack","Array","apply","map","_","list","sin","id","Container","styled","Value","getBarColor","value","Bar","width","backgroundColor","header","Stat","Icon","Stats","stats","gameIcon","icon","ioIcon","featherIcon","IconWidget","GameIcons","IoIcons","FeatherIcons","iconSize","size","Footer","footer","DEV_TOOLS_ACTIVE","location","hostname","DEV_TOOLS","Game","state","getInitialState","this","addUniqueCardId","worldState","world","props","worldData","stat","Object","assign","rounds","defaultState","getInitialCard","availableEvents","getAvailableEvents","selectNextEvent","selectEventCard","initialEventCardId","selectNextCard","getAvailableCards","cards","filter","c","hasMatchingWorldQuery","isAvailableWhen","events","e","shouldTriggerWhen","worldQueries","some","q","isMatchingWorldQuery","flags","entries","every","max","flag","currentAction","actions","left","right","updatedWorld","getUpdatedWorld","modifier","setState","getNextCard","nextCard","eventCards","availableCards","nextEventCardId","type","eventStartingNow","hasOwnProperty","Error","console","log","updateWorldState","updateWorldFlags","currentWorldState","stateModifier","reduce","updatedState","newValue","currentWorldFlags","flagsModifier","updatedFlags","Date","now","selectWeightedRandomFrom","selectRandomFrom","random","probability","array","floor","weightFunc","element","weight","acc","count","selectionList","push","selectionPosition","selectionIndex","findIndex","cardId","eventCard","Component","DEFAULT_GAME_STATE","freeze","environment","people","security","money","defaultStats","name","defaultGameWorld","internalGameWorlds","default","tryLoadFromLocalStorage","path","a","matchLocal","match","gameWorldId","gameWorld","serializedData","localStorage","getItem","data","JSON","parse","tryLoadFromInternalData","matchInternal","warn","tryLoadFromRestAPI","statsPath","cardsPath","eventsPath","eventCardsPath","defaultStatePath","Promise","fetchJSON","all","loadGameWorld","defaultValue","fetch","json","main","App","setWorldData","fetchWorld","URLSearchParams","search","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67eaa33c.chunk.js","sourcesContent":["export enum SwipeDirection {\n    Left = -1,\n    Right = 1,\n}\n","import React, { useState } from 'react'\nimport { animated, interpolate } from 'react-spring'\nimport { useSpring } from 'react-spring'\nimport { useGesture, GestureState } from 'react-with-gesture'\n\nimport { useKeyboardEvent } from '../util/hooks'\nimport { CardData, EventCard } from '../game/ContentTypes'\nimport { SwipeDirection } from '../util/constants'\n\ntype InterpolationTypeHack = any\ntype AnimationState = {\n    x: number\n    y: number\n    scale: number\n    rot: number\n    delay?: number\n}\n\nconst to = (i: number): AnimationState => ({\n    x: 0,\n    y: 0,\n    scale: 1,\n    rot: 0,\n    delay: i * 100,\n})\nconst from = (): AnimationState => ({ rot: 0, scale: 1.0, y: 10, x: 0 })\n\nconst trans = (r: number, s: number) =>\n    `perspective(1500px) rotate3d(1, 0, 0, 30deg) rotate3d(0, 0, 1, ${r}deg) scale(${s})`\n\nconst getDeltaX = () => getThreshold() / window.devicePixelRatio\n\nconst getThreshold = () => Math.min(200, window.innerWidth / 2)\n\ntype CardProps = {\n    i: number\n    cardData: CardData | EventCard\n    onSwipe: (card: CardData | EventCard, direction: SwipeDirection) => void\n    layer: number\n}\n\nconst Card: React.FunctionComponent<CardProps> = ({\n    i,\n    cardData,\n    onSwipe,\n    layer,\n}) => {\n    const { title, distance, text, image } = cardData\n\n    const [cardAnimationState, setCardAnimationState] = useSpring(() => ({\n        ...to(i),\n        from: from(),\n    }))\n\n    const [cardState] = useState<{\n        isGone: boolean\n        currentKey: string | null\n    }>({ isGone: false, currentKey: null })\n\n    const gestureControl: (\n        state: Pick<\n            GestureState,\n            'args' | 'down' | 'delta' | 'distance' | 'direction' | 'velocity'\n        >,\n    ) => void = ({\n        args: [index],\n        down,\n        delta: [xDelta],\n        distance,\n        direction: [xDir],\n        velocity,\n    }) => {\n        const trigger =\n            Math.abs(xDelta) * window.devicePixelRatio > getThreshold()\n        const dir = Math.sign(xDelta)\n\n        if (!down && trigger && !cardState.isGone) {\n            // Handle game state updates\n            cardState.isGone = true\n            window.setTimeout(() => {\n                onSwipe(cardData, dir)\n                cardState.currentKey = null\n            }, 200)\n        }\n        const isGone = cardState.isGone\n\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0\n\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0)\n        const scale = down ? 1.1 : 1\n\n        const animationState = {\n            x,\n            rot,\n            scale,\n            delay: undefined,\n            config: {\n                friction: 50,\n                tension: down ? 800 : isGone ? 200 : 500,\n            },\n        }\n\n        setCardAnimationState(animationState)\n    }\n\n    useKeyboardEvent(['ArrowLeft', 'ArrowRight'], (down, key) => {\n        if (down && !cardState.currentKey) {\n            cardState.currentKey = key\n        }\n        if (cardState.currentKey === key) {\n            const directionX =\n                key === 'ArrowLeft' ? SwipeDirection.Left : SwipeDirection.Right\n            gestureControl({\n                down,\n                delta: [directionX * (getDeltaX() + 1), 0],\n                direction: [directionX, 0],\n                args: [0],\n                distance: 0,\n                velocity: 5,\n            })\n        }\n    })\n\n    const bind = useGesture((args) => {\n        if (!cardState.currentKey) gestureControl(args)\n    })\n\n    const { x, y, rot, scale } = cardAnimationState\n\n    return (\n        <animated.div\n            className=\"card-container\"\n            key={i}\n            style={{\n                position: 'absolute',\n                transform: interpolate(\n                    [x, y],\n                    (x, y) => `translate3d(${x}px,${y}px,0)`,\n                ),\n                zIndex: layer,\n            }}\n        >\n            <animated.div\n                className=\"card card-front\"\n                {...bind(i)}\n                style={{\n                    // TODO: Upgrade to raect-spring to v9 and replace react-with-gesture with react-use-gesture\n                    // Then, also fix this hack\n                    transform: interpolate(\n                        [rot, scale as InterpolationTypeHack],\n                        trans,\n                    ),\n                }}\n            >\n                <div className=\"card-content\">\n                    <div\n                        className=\"card-image\"\n                        style={{\n                            backgroundImage:\n                                'url(' + (image ? image : '') + ')',\n                        }}\n                    ></div>\n                    <div className=\"card-text\">\n                        {distance && <em className=\"location\">{distance}</em>}\n                        <h1 className=\"title\">{title}</h1>\n                        <p className=\"text\">{text}</p>\n                    </div>\n                </div>\n            </animated.div>\n        </animated.div>\n    )\n}\n\nexport default Card\n","import { useEffect } from 'react'\n\nexport const useKeyboardEvent = (\n    keys: string[],\n    callback: (down: boolean, key: string) => void,\n) => {\n    useEffect(() => {\n        const downHandler = function (event: KeyboardEvent) {\n            if (keys.includes(event.key)) {\n                callback(true, event.key)\n            }\n        }\n        const upHandler = function (event: KeyboardEvent) {\n            if (keys.includes(event.key)) {\n                callback(false, event.key)\n            }\n        }\n        window.addEventListener('keydown', downHandler)\n        window.addEventListener('keyup', upHandler)\n        return () => {\n            window.removeEventListener('keydown', downHandler)\n            window.removeEventListener('keyup', upHandler)\n        }\n    })\n}\n","import React from 'react'\n\ntype DummyCardProps = {\n    x: number\n    y: number\n    r: number\n    layer: number\n}\n\nconst DummyCard: React.FunctionComponent<DummyCardProps> = ({\n    x,\n    y,\n    r = 0,\n    layer,\n}) => (\n    <div\n        className=\"card-container\"\n        style={{\n            position: 'absolute',\n            transform: `translate3d(${x}px, ${y}px, 0)`,\n            transition: 'transform 0.1s',\n            zIndex: layer,\n        }}\n    >\n        <div\n            className=\"card card-back\"\n            style={{\n                transform: `perspective(1500px) rotate3d(1, 0, 0, 30deg) rotate3d(0, 0, 1, ${r}deg)`,\n                transition: 'transform 0.1s',\n            }}\n        >\n            <div className=\"card-content\"></div>\n        </div>\n    </div>\n)\n\nexport default DummyCard\n","import React from 'react'\n\nimport Card from './Card'\nimport DummyCard from './DummyCard'\nimport './Deck.scss'\n\nimport { CardData, EventCard } from '../game/ContentTypes'\nimport { SwipeDirection } from '../util/constants'\n\ntype DeckProps = {\n    onSwipe: (card: CardData | EventCard, direction: SwipeDirection) => void\n    card: (CardData | EventCard) & { id: string }\n    tick: number\n}\nconst Deck: React.FunctionComponent<DeckProps> = ({\n    onSwipe,\n    card,\n    tick = 0,\n}) => {\n    const cardStack = Array.apply(null, Array(5)).map((_, index) => index)\n    return (\n        <div className=\"deck-root\">\n            {cardStack.map((key, index, list) => (\n                <DummyCard\n                    x={0}\n                    y={\n                        10 +\n                        list[loopingIndex(index, list.length, tick)] *\n                            (50 / list.length)\n                    }\n                    key={index}\n                    r={Math.sin(key * 2345) * 1}\n                    layer={list.length - loopingIndex(index, list.length, tick)}\n                />\n            ))}\n            <Card\n                i={0}\n                key={card.id}\n                cardData={card}\n                onSwipe={onSwipe}\n                layer={cardStack.length + 1}\n            />\n        </div>\n    )\n}\n\nfunction loopingIndex(index: number, length: number, tick: number) {\n    const result = (length + index - (tick % length)) % length\n    return result\n}\n\nexport default Deck\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\nconst Container = styled.div`\n    margin-top: 10px;\n    width: 40px;\n    height: 8px;\n    border-radius: 4px;\n    background: #546a76;\n`\n\nconst Value = styled.div`\n    position: relative;\n    top: 1px;\n    left: 1px;\n    height: 6px;\n    max-width: 38px;\n    border-radius: 3px;\n`\n\ntype BarProps = {\n    value: number\n}\n\nconst Bar: React.FunctionComponent<BarProps> = ({ value = 100 }) => (\n    <Container>\n        <Value\n            style={{\n                width: `${value}%`,\n                backgroundColor: getBarColor(value),\n            }}\n        />\n    </Container>\n)\n\nfunction getBarColor(value: number): string {\n    if (value <= 30) {\n        return '#dd7373'\n    } else if (value <= 70) {\n        return '#e7e247'\n    } else {\n        return '#91c779'\n    }\n}\n\nexport default Bar\n","import React from 'react'\nimport styled from 'styled-components/macro'\n\n// This could prove to be a hit in binary size since we require all the icons in each pack. This compromise allows for more dynamic content.\nimport * as IoIcons from 'react-icons/io'\nimport * as GameIcons from 'react-icons/gi'\nimport * as FeatherIcons from 'react-icons/fi'\n\nimport Bar from './Bar'\nimport { StatDefinition } from '../game/ContentTypes'\n\nconst Container = styled.header`\n    background: #f6fbf5;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n`\n\nconst Stat = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-direction: column;\n`\n\nconst Icon = styled.div`\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: #91c779;\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\ntype StatsProps = {\n    stats: (StatDefinition & { value: number })[]\n}\n\nconst Stats: React.FunctionComponent<StatsProps> = ({ stats }) => (\n    <Container>\n        {stats.map((s) => {\n            const gameIcon = s.icon as keyof typeof GameIcons\n            const ioIcon = s.icon as keyof typeof IoIcons\n            const featherIcon = s.icon as keyof typeof FeatherIcons\n            const IconWidget =\n                GameIcons[gameIcon] ||\n                IoIcons[ioIcon] ||\n                FeatherIcons[featherIcon]\n            const iconSize = s.iconSize || '80%'\n            const value = s.value\n            return (\n                <Stat key={s.id}>\n                    <Icon>{IconWidget && <IconWidget size={iconSize} />}</Icon>\n                    <Bar value={value} />\n                </Stat>\n            )\n        })}\n    </Container>\n)\n\nexport default Stats\n","import React, { Component } from 'react'\nimport styled from 'styled-components/macro'\n\nimport Deck from './Deck'\nimport Stats from './Stats'\nimport { SwipeDirection } from '../util/constants'\n\nimport {\n    GameWorld,\n    WorldState,\n    WorldQuery,\n    GameWorldModifier,\n    WorldEvent,\n    CardData,\n    EventCard,\n    CardActionData,\n    EventCardActionData,\n    EventCardId,\n} from '../game/ContentTypes'\n\nconst Footer = styled.footer`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\ndeclare global {\n    interface Window {\n        DEV_TOOLS_ACTIVE: Boolean\n        DEV_TOOLS: {\n            availableCards?: CardData[]\n            availableEvents?: WorldEvent[]\n            nextCard?: CardData | EventCard\n        }\n    }\n}\n\n// Enable DEV_TOOLS for local development by default to improve DX\nwindow.DEV_TOOLS_ACTIVE = window.location.hostname.includes('localhost')\nwindow.DEV_TOOLS = {}\n\ntype GameProps = {\n    worldData: GameWorld\n}\n\ntype GameState = {\n    world: WorldState\n    card: CardData | EventCard\n    rounds: number\n}\n\nexport default class Game extends Component<GameProps, GameState> {\n    state = this.getInitialState()\n\n    render() {\n        const card = this.addUniqueCardId(this.state.card)\n        const worldState = this.state.world.state\n        const stats = this.props.worldData.stats.map((stat) =>\n            Object.assign({}, stat, {\n                value: worldState[stat.id],\n            }),\n        )\n        return (\n            <>\n                <Stats stats={stats} />\n                <Deck\n                    onSwipe={this.onSwipe.bind(this)}\n                    card={card}\n                    tick={this.state.rounds}\n                />\n                <Footer>\n                    <div className=\"time-remaining\"></div>\n                </Footer>\n            </>\n        )\n    }\n\n    getInitialState() {\n        const defaultState = this.props.worldData.defaultState\n        return {\n            world: defaultState,\n            card: this.getInitialCard(defaultState),\n            rounds: 0,\n        }\n    }\n\n    getInitialCard(world: WorldState): EventCard | CardData {\n        const availableEvents = this.getAvailableEvents(world)\n        const event = this.selectNextEvent(availableEvents)\n\n        if (event) {\n            return this.selectEventCard(event.initialEventCardId)\n        } else {\n            return this.selectNextCard(\n                this.getAvailableCards(this.props.worldData.defaultState),\n            )\n        }\n    }\n\n    getAvailableCards(world: WorldState): CardData[] {\n        const { cards } = this.props.worldData\n        return cards.filter((c) =>\n            this.hasMatchingWorldQuery(world, c.isAvailableWhen),\n        )\n    }\n\n    getAvailableEvents(world: WorldState): WorldEvent[] {\n        const { events } = this.props.worldData\n        return events.filter((e) =>\n            this.hasMatchingWorldQuery(world, e.shouldTriggerWhen),\n        )\n    }\n\n    hasMatchingWorldQuery(\n        world: WorldState,\n        worldQueries: WorldQuery[],\n    ): Boolean {\n        return worldQueries.some((q) => this.isMatchingWorldQuery(world, q))\n    }\n\n    isMatchingWorldQuery(\n        world: WorldState,\n        { state = {}, flags = {} }: WorldQuery,\n    ): Boolean {\n        const hasStateMatch = Object.entries(state).every(\n            ([key, [min, max]]) =>\n                world.state[key] >= min && world.state[key] <= max,\n        )\n\n        const result =\n            hasStateMatch &&\n            Object.entries(flags).every(\n                ([flag, value]) => world.flags[flag] === value,\n            )\n\n        return result\n    }\n\n    onSwipe(card: CardData | EventCard, direction: SwipeDirection): void {\n        const currentAction =\n            direction === SwipeDirection.Left\n                ? card.actions.left\n                : card.actions.right\n\n        const updatedWorld = this.getUpdatedWorld(currentAction.modifier)\n\n        this.setState({\n            world: updatedWorld,\n            card: this.getNextCard(updatedWorld, card, currentAction),\n            rounds: this.state.rounds + 1,\n        })\n    }\n\n    getNextCard(\n        updatedWorld: WorldState,\n        card: CardData | EventCard,\n        currentAction: CardActionData | EventCardActionData,\n    ): CardData | EventCard {\n        const { eventCards } = this.props.worldData\n        const availableEvents = this.getAvailableEvents(updatedWorld)\n        let availableCards: CardData[] = []\n\n        const nextEventCardId: string | null =\n            card.type === 'event' && 'nextEventCardId' in currentAction\n                ? currentAction.nextEventCardId\n                : null\n        const eventStartingNow = !nextEventCardId\n            ? this.selectNextEvent(availableEvents)\n            : null\n        let nextCard\n\n        // Only select the next EventCard if a specific one is given\n        // Else cancel the event and continue with normal cards.\n        if (nextEventCardId) {\n            if (!eventCards.hasOwnProperty(nextEventCardId)) {\n                throw new Error(\n                    `eventCardId \"${nextEventCardId}\" does not exist. Make sure it's spelled correctly`,\n                )\n            }\n            nextCard = this.selectEventCard(nextEventCardId)\n        } else if (eventStartingNow) {\n            nextCard = this.selectEventCard(eventStartingNow.initialEventCardId)\n        } else {\n            availableCards = this.getAvailableCards(updatedWorld)\n            nextCard = this.selectNextCard(availableCards)\n        }\n\n        if (window.DEV_TOOLS_ACTIVE) {\n            window.DEV_TOOLS.availableCards = availableCards\n            window.DEV_TOOLS.availableEvents = availableEvents\n            window.DEV_TOOLS.nextCard = nextCard\n\n            console.log('DEV TOOLS: ', window.DEV_TOOLS)\n        }\n\n        if (!nextCard) throw new Error('Content error. No next card available.')\n        return nextCard\n    }\n\n    getUpdatedWorld({\n        type = 'add',\n        state = {},\n        flags = {},\n    }: GameWorldModifier): WorldState {\n        // get default values for missing props by destructuring the incoming `modifier` and then directly reassembling it\n        // IDEA: Could this all be done in the function declaration, when specifying parameters?\n        const modifier: GameWorldModifier = { type, state, flags }\n        const updatedWorldState = this.updateWorldState(modifier)\n        const updatedWorldFlags = this.updateWorldFlags(modifier)\n\n        return {\n            state: updatedWorldState,\n            flags: updatedWorldFlags,\n        }\n    }\n\n    updateWorldState(modifier: GameWorldModifier): WorldState['state'] {\n        const currentWorldState: WorldState['state'] =\n            modifier.type === 'replace'\n                ? Object.assign({}, this.props.worldData.defaultState.state)\n                : Object.assign({}, this.state.world.state)\n\n        const stateModifier = modifier.state || {}\n        const updatedWorldState = Object.entries(stateModifier).reduce<\n            WorldState['state']\n        >((updatedState: WorldState['state'], [key, value]) => {\n            const newValue =\n                modifier.type === 'set' || modifier.type === 'replace'\n                    ? value\n                    : value + (updatedState[key] || 0)\n\n            updatedState[key] = Math.min(Math.max(newValue, 0), 100)\n\n            return updatedState\n        }, currentWorldState)\n\n        return updatedWorldState\n    }\n\n    updateWorldFlags(modifier: GameWorldModifier): WorldState['flags'] {\n        const currentWorldFlags: WorldState['flags'] =\n            modifier.type === 'replace'\n                ? Object.assign({}, this.props.worldData.defaultState.flags)\n                : Object.assign({}, this.state.world.flags)\n\n        const flagsModifier = modifier.flags || {}\n        const updatedWorldFlags = Object.entries(flagsModifier).reduce<\n            WorldState['flags']\n        >((updatedFlags, [key, value]) => {\n            updatedFlags[key] = value\n            return updatedFlags\n        }, currentWorldFlags)\n\n        return updatedWorldFlags\n    }\n\n    addUniqueCardId(\n        card: CardData | EventCard,\n        index: number = 0,\n    ): (CardData | EventCard) & { id: string } {\n        return {\n            ...card,\n            id: Date.now() + ':' + index,\n        }\n    }\n\n    selectNextCard(cards: CardData[] = []): CardData {\n        return this.selectWeightedRandomFrom(cards)\n    }\n\n    selectNextEvent(events: WorldEvent[] = []): WorldEvent | undefined {\n        const event = this.selectRandomFrom(events)\n        if (event && Math.random() <= event.probability) {\n            return event\n        }\n    }\n\n    selectRandomFrom<T>(array: T[]): T {\n        return array[Math.floor(Math.random() * array.length)]\n    }\n\n    selectWeightedRandomFrom<T extends { weight: number }>(\n        array: T[],\n        weightFunc = (element: T) => element.weight,\n    ): T {\n        const { selectionList, count } = array.reduce<{\n            count: number\n            selectionList: number[]\n        }>(\n            (acc, element) => {\n                acc.count += weightFunc(element)\n                acc.selectionList.push(acc.count)\n                return acc\n            },\n            { count: 0, selectionList: [] },\n        )\n\n        const selectionPosition = Math.random() * count\n        const selectionIndex = selectionList.findIndex((max, index, array) => {\n            const min = index > 0 ? array[index - 1] : 0\n            return selectionPosition >= min && selectionPosition <= max\n        })\n\n        return array[selectionIndex]\n    }\n\n    selectEventCard(cardId: EventCardId): EventCard {\n        const { eventCards } = this.props.worldData\n        const eventCard = eventCards[cardId]\n        if (!eventCard)\n            throw new Error(\n                `ContentError: EventCard with EventCardId \"${cardId}\" does not exist`,\n            )\n        return eventCard\n    }\n}\n","import { cards as defaultCards } from '../data/default/cards'\nimport { events as defaultEvents } from '../data/default/events'\nimport { eventCards as defaultEventCards } from '../data/default/event-cards'\n\nimport {\n    WorldState,\n    StatDefinition,\n    CardData,\n    EventCards,\n    WorldEvent,\n    GameWorld,\n} from './ContentTypes'\n\nexport const DEFAULT_GAME_STATE: WorldState = Object.freeze({\n    state: {\n        environment: 40,\n        people: 60,\n        security: 75,\n        money: 90,\n    },\n    flags: {},\n})\n\nconst defaultStats: StatDefinition[] = [\n    {\n        id: 'environment',\n        name: 'Environment',\n        icon: 'GiWheat',\n    },\n    {\n        id: 'people',\n        name: 'People',\n        icon: 'IoIosPeople',\n    },\n    {\n        id: 'security',\n        name: 'Security',\n        icon: 'GiAk47',\n    },\n    {\n        id: 'money',\n        name: 'Money',\n        icon: 'GiMoneyStack',\n    },\n]\n\nexport const defaultGameWorld: GameWorld = {\n    stats: defaultStats,\n    cards: defaultCards,\n    events: defaultEvents,\n    eventCards: defaultEventCards,\n    defaultState: DEFAULT_GAME_STATE,\n}\n\nconst internalGameWorlds: {\n    [worldId: string]: GameWorld\n} = {\n    default: defaultGameWorld,\n}\n\nasync function tryLoadFromLocalStorage(\n    path: string,\n): Promise<GameWorld | null> {\n    const matchLocal = path.match(/^local:\\/\\/(.*)/)\n\n    if (matchLocal) {\n        // Import from SFF game world editor hosted on the same domain.\n        // Using localStorage to share data across apps\n        const id = matchLocal[1]\n        const gameWorldId = 'game_world:' + id\n        let gameWorld = {}\n        try {\n            const serializedData = localStorage.getItem(gameWorldId)\n            const data = serializedData ? JSON.parse(serializedData) : null\n            if (!data)\n                throw new Error(\n                    'Could not load data from local storage: ' + gameWorldId,\n                )\n            gameWorld = data || {}\n        } catch (e) {\n            console.log(e)\n        }\n        return Object.assign({}, defaultGameWorld, gameWorld)\n    }\n\n    return null\n}\n\n// Load GameWorld from data directory of this repository\nasync function tryLoadFromInternalData(\n    path: string,\n): Promise<GameWorld | null> {\n    const matchInternal = path.match(/^internal:\\/\\/(.*)/)\n\n    if (matchInternal) {\n        const id = matchInternal[1]\n        const gameWorld = internalGameWorlds[id]\n        if (!gameWorld) {\n            console.warn('Could not load local game world: ', id)\n            return defaultGameWorld\n        }\n        return gameWorld\n    }\n\n    return null\n}\n\nasync function tryLoadFromRestAPI(path: string): Promise<GameWorld | null> {\n    // Default: expect a folder to represent a game world and contain specific JSON-files.\n    const statsPath = path + '/stats.json'\n    const cardsPath = path + '/cards.json'\n    const eventsPath = path + '/events.json'\n    const eventCardsPath = path + '/event-cards.json'\n    const defaultStatePath = path + '/default-state.json'\n\n    // IDEA: load data in parallel instead of sequentially to improve performance\n    // Use Promise.all() or similar - https://stackoverflow.com/a/35612484\n    const [stats, cards, events, eventCards, defaultState] = await Promise.all<\n        StatDefinition[],\n        CardData[],\n        WorldEvent[],\n        EventCards,\n        WorldState\n    >([\n        await fetchJSON(statsPath, defaultStats),\n        await fetchJSON(cardsPath, []),\n        await fetchJSON(eventsPath, []),\n        await fetchJSON(eventCardsPath, {}),\n        await fetchJSON(defaultStatePath, DEFAULT_GAME_STATE),\n    ])\n\n    return {\n        stats,\n        cards,\n        events,\n        eventCards,\n        defaultState,\n    }\n}\n\nexport async function loadGameWorld(path: string) {\n    return (\n        (await tryLoadFromInternalData(path)) ||\n        (await tryLoadFromLocalStorage(path)) ||\n        (await tryLoadFromRestAPI(path))\n    )\n}\n\nasync function fetchJSON<T>(path: string, defaultValue: T): Promise<T> {\n    try {\n        console.log('fetching path: ', path)\n        return await (await window.fetch(path)).json()\n    } catch (e) {\n        console.warn('Could not load path: ' + path)\n\n        return defaultValue\n    }\n}\n","import { CardData } from '../../game/ContentTypes'\n\nexport const cards: CardData[] = [\n    {\n        type: 'card',\n        image:\n            'https://images.unsplash.com/photo-1561623002-b3520705eccf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60',\n        title: 'We need power.',\n        distance: '4 miles away',\n        text: 'Lorem ipsum COALar sit amet consectetur, adipisicing elit.',\n        weight: 1,\n        isAvailableWhen: [\n            { state: { environment: [10, 100], money: [80, 100] } },\n            { state: { people: [10, 100], money: [80, 100] } },\n            { state: { security: [10, 100], money: [80, 100] } },\n        ],\n        actions: {\n            left: {\n                modifier: {\n                    type: 'add',\n                    state: {\n                        environment: -100,\n                        people: -100,\n                        security: -100,\n                        money: -100,\n                    },\n                },\n            },\n            right: {\n                modifier: {\n                    type: 'add',\n                    state: {\n                        environment: 40,\n                        people: 60,\n                        security: 75,\n                        money: 90,\n                    },\n                },\n            },\n        },\n    },\n    {\n        type: 'card',\n        image:\n            'https://images.unsplash.com/photo-1497435334941-8c899ee9e8e9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60',\n        title: 'Invest in solar?',\n        distance: '100 miles away',\n        text: 'Lorem ipsum SOLAR sit amet consectetur, adipisicing elit.',\n        weight: 1,\n        isAvailableWhen: [\n            { state: { environment: [60, 100], money: [30, 31] } },\n            { state: { people: [60, 100], money: [30, 31] } },\n            { state: { security: [60, 100], money: [30, 31] } },\n        ],\n        actions: {\n            left: {\n                modifier: {\n                    type: 'add',\n                    state: {\n                        environment: -100,\n                        people: -100,\n                        security: -100,\n                        money: -100,\n                    },\n                },\n            },\n            right: {\n                modifier: {\n                    type: 'add',\n                    state: {\n                        environment: 40,\n                        people: 60,\n                        security: 75,\n                        money: 90,\n                    },\n                },\n            },\n        },\n    },\n]\n","import { WorldEvent } from '../../game/ContentTypes'\n\nexport const events: WorldEvent[] = [\n    {\n        probability: 1,\n        shouldTriggerWhen: [\n            { state: { environment: [0, 0] } },\n            { state: { security: [0, 0] } },\n            { state: { money: [0, 0] } },\n            { state: { people: [0, 0] } },\n        ],\n        initialEventCardId: 'end-game',\n    },\n]\n","import { EventCards } from '../../game/ContentTypes'\n\nexport const eventCards: EventCards = {\n    'end-game': {\n        type: 'event',\n        image:\n            'https://images.unsplash.com/photo-1497039465987-61d305728610?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60',\n        title: 'The World Has Ended.',\n        distance: '100 miles away',\n        text:\n            'Please find a new planet to destroy, if you want to proceed. And do not try to swipe. Please.',\n        weight: 1000,\n        actions: {\n            left: {\n                modifier: {\n                    type: 'replace',\n                    state: {\n                        environment: 10,\n                        people: 10,\n                        security: 10,\n                    },\n                    flags: {},\n                },\n                nextEventCardId: null,\n            },\n            right: {\n                modifier: {\n                    type: 'replace',\n                    state: {\n                        environment: 10,\n                        people: 10,\n                        security: 10,\n                    },\n                    flags: {},\n                },\n                nextEventCardId: null,\n            },\n        },\n    },\n}\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components/macro'\n\nimport Game from './components/Game'\nimport { loadGameWorld } from './game/GameWorld'\nimport { GameWorld } from './game/ContentTypes'\n\nconst Container = styled.main`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100%;\n    background: #546a76;\n    display: grid;\n    grid-template-rows: minmax(50px, 80px) auto minmax(50px, 80px);\n`\ntype AppProps = {\n    path: string\n}\n\nfunction App({ path }: AppProps) {\n    const [worldData, setWorldData] = useState<GameWorld | null>(null)\n    useEffect(() => {\n        const fetchWorld = async () => {\n            const worldData = await loadGameWorld(path)\n            setWorldData(worldData)\n        }\n        fetchWorld()\n    }, [path, setWorldData])\n    return <Container>{worldData && <Game worldData={worldData} />}</Container>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nconst urlParams = new URLSearchParams(window.location.search)\nconst path = urlParams.get('path') || '/data/default'\n\nReactDOM.render(<App path={path} />, document.getElementById('root'))\n"],"sourceRoot":""}